// Reg that checks if the emoji a flag unicode
const checkFlagReg = /[\uD83C][\uDDE6-\uDDFF][\uD83C][\uDDE6-\uDDFF]/;

// Subtraction factor from Regional Letter Alphabets -> Alphebtical Charcodes
const uncode_subtraction_factor = 127397;

// Function that converts one unicode -> alphabetical letter
const unicodeToAlphabet = (unicode_letter) =>
  String.fromCharCode(unicode_letter - uncode_subtraction_factor);

//Check if the character is between ðŸ‡¦ - ðŸ‡¿
const checkIfCharIsRegionalAlphabet = (unicode) => 127462 <= unicode && unicode <= 127487;

const checkIfFlagEmoji = (string) => {
  let letters = "";

  for (let i = 0; i < string.length; i++) {
    const unicode = string.codePointAt(i);
    if (checkIfCharIsRegionalAlphabet(unicode)) {
      letters += String.fromCodePoint(unicode);
    }
  }

  return checkFlagReg.test(letters);
};

function unicodeToString(unicode_string) {
  unicode_string = unicode_string.replace(/\s+/g);
  let letters = "";
  for (let i = 0; i < unicode_string.length; i++) {
    const codePoint = unicode_string.codePointAt(i);
    if (!checkIfCharIsRegionalAlphabet(codePoint)) continue;

    letters += unicodeToAlphabet(codePoint);
  }
  return letters;
}

console.log(new Intl.DisplayNames(["en"], { type: "region" }).of("JP"));
module.exports = {
  unicodeToString,
  checkIfCharIsRegionalAlphabet,
  checkFlagReg,
  checkIfFlagEmoji,
};

/**
 * 
ðŸ‡¦ unicode =  127462
ðŸ‡§ unicode =  127463
ðŸ‡¨ unicode =  127464
ðŸ‡© unicode =  127465
ðŸ‡ª unicode =  127466
ðŸ‡« unicode =  127467
ðŸ‡¬ unicode =  127468
ðŸ‡­ unicode =  127469
ðŸ‡® unicode =  127470
ðŸ‡¯ unicode =  127471
ðŸ‡° unicode =  127472
ðŸ‡± unicode =  127473
ðŸ‡² unicode =  127474
ðŸ‡³ unicode =  127475
ðŸ‡´ unicode =  127476
ðŸ‡µ unicode =  127477
ðŸ‡¶ unicode =  127478
ðŸ‡· unicode =  127479
ðŸ‡¸ unicode =  127480
ðŸ‡¹ unicode =  127481
ðŸ‡º unicode =  127482
ðŸ‡» unicode =  127483
ðŸ‡¼ unicode =  127484
ðŸ‡½ unicode =  127485
ðŸ‡¾ unicode =  127486
ðŸ‡¿ unicode =  127487
 * 
 */
